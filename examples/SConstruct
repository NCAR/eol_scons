# -*- python -*-

##
# @file examples/SConstruct
#
# Example of a top-level SConstruct file taken from the aeros project.
# Aeros() is a tool function which gets added to the GLOBAL_TOOLS list,
# so that it is applied to all Environment instances created within
# this source tree.
#
# After defining the global tool, it loads specific SConscript files,
# and finally defines the Help() text collected from all the Variables.
#

import os.path
import eol_scons

svnversion = None

def Aeros(env):
    env.Require(['prefixoptions', 'buildmode', 'doxygen'])
    if env['CC'] == "gcc":
        env["_LIBFLAGS"] += ' -lpthread'
        env.Append(CCFLAGS=['-fmessage-length=0'])
        env.Append(CCFLAGS=['-Wno-non-virtual-dtor'])
        env.Append(CCFLAGS=['-Wno-uninitialized'])
        env.Append(CCFLAGS=['-Wno-parentheses'])
    else:
        env.Append(CCFLAGS=['/EHsc','/MDd','/GR','/GX'])
        env.PassEnv(r'VC.*')
        env.PassEnv(r'VS.*')
        env.PassEnv(r'DevEnvDir')
        env.PassEnv(r'Framework.*')

    env['DEFAULT_OPT_PREFIX'] = '/opt/local/aeros'
    env['DOXYFILE_DICT'].update({ 'HTML_HEADER' : env.File("#header.html") })
    env['DOXYFILE_DICT'].update({ 'PROJECT_NUMBER' : svnversion })
    env['DOXYGEN'] = '/usr/bin/doxygen'
    env['TAGDIR'] = '#/../doc/tags'
    env.SetDoxref('QWT_DOXREF','$TAGDIR/qwt-5.2.x.tag',
              'http://qwt.sourceforge.net')
    env.SetDoxref('SOQT_DOXREF','$TAGDIR/soqt-1.4.1-qt4.tag',
              'http://doc.coin3d.org/SoQt')
    env.SetDoxref('COIN_DOXREF','$TAGDIR/coin-3.0.0.tag',
                  'http://doc.coin3d.org/Coin')
    env.SetDoxref('QT_DOXREF', '$TAGDIR/qt-4.4.3.tag',
                  'http://doc.trolltech.com/4.4')
    env.SetDoxref('LOG4CPP_DOXREF', '$TAGDIR/log4cpp.tag',
                  'http://log4cpp.sourceforge.net/api')

    # Set some project-wide defaults for doxygen output.
    #
    # Use these to document everything, including the private interfaces,
    # call graphs, and relation references.
    env['DOXYFILE_TEXT'] = """
PROJECT_NAME = "AEROS"
PREDEFINED = DOXYGEN
INLINE_INHERITED_MEMB = YES
FULL_PATH_NAMES = NO
EXTRACT_ALL = YES
EXTRACT_PRIVATE = YES
EXTRACT_STATIC = YES
REFERENCED_BY_RELATION = YES
REFERENCES_RELATION = YES
GENERATE_LATEX = NO
HIDE_UNDOC_RELATIONS = NO
HAVE_DOT = YES
UML_LOOK = YES 
CALL_GRAPH = YES
"""
    # Use these to rely on more of the doxygen defaults and document public
    # interfaces only.
    env['DOXYFILE_TEXT'] = """
PROJECT_NAME = "AEROS"
PREDEFINED = DOXYGEN
FULL_PATH_NAMES = NO
HAVE_DOT = YES
UML_LOOK = YES 
GENERATE_LATEX = NO
"""

    # Pass postgres environment variables for tests which need them
    env.PassEnv(r'PG.*')
    
    if env['PLATFORM'] == 'win32':
        # specializations for windows builds
        usrlocal = 'c:/msys/1.0/local/'
        # Qt
        #   The following done becasue it seems that the qt4 tool under windows does
        #   not add an include path which is above the module directories. Need to
        #   look at the qt4 tool, compare with Linux behavior, and figure this out.
        qt = 'C:/Qt/2010.02.1/qt'
        env.AppendUnique(CPPPATH=[qt+'/include'])
        env.AppendUnique(LIBPATH=[qt+'/bin'])
        # Boost
        env['BOOST_LIBRARY_SUFFIX'] = '-mgw44-mt-1_42'
        env.AppendUnique(CPPPATH=[usrlocal+'/include/boost-1_42'])
    
    if env['PLATFORM'] == 'darwin':
       	# Mac OS setup
    	qt4Modules = Split('QtGui QtCore QtNetwork QtSvg')
		# Qt configuration:
		#    the following uses the frameworks scheme available for gcc on Mac OS
		#    to provide libraries and library paths
        frameworkpath=''
        #env.AppendUnique(FRAMEWORKPATH=['/Library/Frameworks',])
        env.AppendUnique(FRAMEWORKPATH=['/Library/Frameworks','/usr/local/lib'])
        env.AppendUnique(FRAMEWORKS=qt4Modules)
        #    specify the include paths for the qt4 modules and qwt. It seems like the
        #    gcc frameworks scheme should do this, but it doesn't
        for f in qt4Modules:
			#p = '/Library/Frameworks/'+f+'.framework/Headers'
            p = '/usr/local/lib/'+f+'.framework/Headers'
            env.AppendUnique(CPPPATH=[p,])
        # Do the same for qwt. The qwt framework should have been installed in /Library/Frameworks
        env.AppendUnique(FRAMEWORKS=['qwt',])
		#env.AppendUnique(CPPPATH=['/Library/Frameworks/qwt.framework/Headers',])
        env.AppendUnique(CPPPATH=['/usr/local/lib/qwt.framework/Headers',])
        env.AppendUnique(FRAMEWORKS=['Inventor',])
        env.AppendUnique(FRAMEWORKS=['Quarter',])
        env.AppendUnique(FRAMEWORKS=['QtSql',])
        
    return env

env = Environment(tools = ['default', 'rerun', 'svninfo'], 
                  GLOBAL_TOOLS = [Aeros])

if env.Rerun():
    Return()

svnversion = env['SVNREVISION']
env['DOXYFILE_DICT'].update({ 'PROJECT_NUMBER' : svnversion })

SConscript('logx/SConscript')

##
##  Build Numerical Toolbox
##
SConscript('numeric/SConscript')

##
##  Build datastore
##
SConscript('datastore/SConscript')

##
##  Build plotlib
##
SConscript('plotlib/SConscript')

##
## Build sqlion program.  This has been ported to qt4, so put off building
## it by default until everything else is building with Qt4.
##
#if os.path.exists('../utils/sqlion/SConscript'):
#    SConscript('../utils/sqlion/SConscript')

##
##  Build aeros application.
##
SConscript('aeros/SConscript')

##
##  Build installers
##
SConscript('installers/SConscript')

env.Alias('apidocs', env.Dir("apidocs"))

options = env.GlobalOptions()
options.Update(env)
Help(options.GenerateHelpText(env))

env.Alias('all', DEFAULT_TARGETS)

